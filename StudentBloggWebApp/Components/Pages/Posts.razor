@page "/posts"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using StudentBlogg.Feature.Posts
@inject HttpClient Http
@inject ProtectedLocalStorage ProtectedLocalStorage

<h1>Blogginnlegg</h1>
<hr/>
<br/>
@if (_isLoading)
{
    <p>Laster...</p>
}
else if (_posts != null && _posts.Any())
{
    @foreach (var post in _posts)
    {
        <div>
            <Card Style="flex: content;">
                <CardBody>
                    <CardTitle>@post.Title</CardTitle>
                    <em>Opprettet: @post.DatePosted</em>
                    <CardText>@post.Content</CardText>
                    <Button Color="ButtonColor.Primary" To="@($"post/{post.Id}")" Type="ButtonType.Link">Les mer</Button>
                    <span class="bi bi-chat-left-text" style="font-size: 20px;"></span> x kommentarer
                </CardBody>
            </Card>
        </div>
    }
}
else if (_tokenResult.Success)
{
    <p>Du er ikke innlogget. Du må være logget inn for å se innlegg!</p>
}
else
{
    <p>Ingen innlegg finnes, eller feilet innhenting.</p>
}

@code {
    private IEnumerable<PostDto>? _posts;
    private bool _isLoading = true;
    private ProtectedBrowserStorageResult<string> _tokenResult;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _tokenResult = await ProtectedLocalStorage.GetAsync<string>("authToken");
            if (_tokenResult.Success && !string.IsNullOrEmpty(_tokenResult.Value))
            {
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _tokenResult.Value);

                var response = await Http.GetFromJsonAsync<IEnumerable<PostDto>>("api/v1/Posts?page=1&pageSize=10");

                if (response != null)
                {
                    _posts = response;
                }
                else
                {
                    await Console.Error.WriteLineAsync("No data returned from API.");
                }
            }
            else
            {
                await Console.Error.WriteLineAsync("Token not found or invalid.");
            }
        }
        catch (Exception ex)
        {
            await Console.Error.WriteLineAsync($"Error fetching posts: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }
}