@page "/Profile"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using StudentBlogg.Feature.Users
@inject HttpClient Http
@inject ProtectedLocalStorage ProtectedLocalStorage
@using System.IdentityModel.Tokens.Jwt
@inject NavigationManager NavigationManager

<h1>Profil</h1>
<hr/>
<br/>

@if (_isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else if (_userRegistrationDto != null)
{
    <div style="width: 100%; max-width: 33%">
        <NavLink href="/createpost" class="btn btn-primary">Opprett nytt innlegg</NavLink>
        <br /><br />
        <EditForm Model="_userRegistrationDto" OnValidSubmit="SaveChanges">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="Username">Brukernavn</label>
                <InputText id="Username" class="form-control" disabled="true" @bind-Value="_userRegistrationDto.Username" />
            </div>

            <div class="form-group">
                <label for="FirstName">Fornavn</label>
                <InputText id="FirstName" class="form-control" @bind-Value="_userRegistrationDto.Firstname" />
            </div>

            <div class="form-group">
                <label for="LastName">Etternavn</label>
                <InputText id="LastName" class="form-control" @bind-Value="_userRegistrationDto.Lastname" />
            </div>

            <div class="form-group">
                <label for="Email">Email</label>
                <InputText id="Email" class="form-control" @bind-Value="_userRegistrationDto.Email" />
            </div>
            <br />

            <button type="submit" class="btn btn-primary" disabled="@_isSaving">Lagre endringer</button>
            <NavLink href="/changepassword" class="btn btn-secondary" style="margin-left: 10px">Endre passord</NavLink>
            <button class="btn btn-danger" @onclick="OpenDeleteModal">Slett bruker</button>
        </EditForm>
    </div>
}
else
{
    <p>No user data available.</p>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger">@_errorMessage</div>
}
@if (!string.IsNullOrEmpty(_successMessage))
{
    <div class="alert alert-success">@_successMessage</div>
}

@if (_showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bekreft sletting</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Er du sikker p책 at du vil slette brukeren? Dette kan ikke angres.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Avbryt</button>
                    <button class="btn btn-danger" @onclick="DeleteUserAsync">Slett</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private UserRegistrationDto _userRegistrationDto = new();
    private bool _isLoading = true;
    private bool _isSaving;
    private bool _showDeleteModal;
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await GetAuthTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                _errorMessage = "Ingen token funnet. Vennligst logg inn.";
                return;
            }

            var userId = GetUserIdFromToken(token);
            if (userId == Guid.Empty)
            {
                _errorMessage = "Token er ugyldig.";
                return;
            }

            Http.DefaultRequestHeaders.Authorization = 
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetFromJsonAsync<UserDto>($"api/v1/Users/{userId}");
            if (response != null)
            {
                _userRegistrationDto = new UserRegistrationDto
                {
                    Username = response.Username,
                    Firstname = response.FirstName,
                    Lastname = response.LastName,
                    Email = response.Email
                };
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Klarte ikke 책 laste brukerdata: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            _isSaving = true;
            var token = await GetAuthTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                _errorMessage = "Ingen token funnet. Vennligst logg inn.";
                return;
            }

            var userId = GetUserIdFromToken(token);
            Http.DefaultRequestHeaders.Authorization = 
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsJsonAsync($"api/v1/Users/{userId}", _userRegistrationDto);
            if (response.IsSuccessStatusCode)
            {
                _successMessage = "Endringene ble lagret.";
            }
            else
            {
                _errorMessage = $"Klarte ikke 책 lagre endringene: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"En feil oppstod under lagring: {ex.Message}";
        }
        finally
        {
            _isSaving = false;
        }
    }

    private async Task<string?> GetAuthTokenAsync()
    {
        var result = await ProtectedLocalStorage.GetAsync<string>("authToken");
        return result.Success ? result.Value : null;
    }

    private Guid GetUserIdFromToken(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var userIdClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "UserId");
        return userIdClaim != null && Guid.TryParse(userIdClaim.Value, out var userId) ? userId : Guid.Empty;
    }
    
    private void OpenDeleteModal()
    {
        _showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        _showDeleteModal = false;
    }

    private async Task DeleteUserAsync()
    {
        try
        {
            var token = await GetAuthTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                _errorMessage = "Ingen token funnet. Vennligst logg inn.";
                return;
            }

            var userId = GetUserIdFromToken(token);
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.DeleteAsync($"api/v1/Users/{userId}");
            if (response.IsSuccessStatusCode)
            {
                _successMessage = "Brukeren ble slettet.";
                _userRegistrationDto = null; // Clear user data.
                _showDeleteModal = false;
                
                await ProtectedLocalStorage.DeleteAsync("authToken");

                NavigationManager.NavigateTo("/");
            }
            else
            {
                _errorMessage = $"Klarte ikke 책 slette brukeren: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"En feil oppstod under sletting: {ex.Message}";
        }
    }
}
