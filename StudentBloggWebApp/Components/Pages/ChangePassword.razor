@page "/changepassword"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject HttpClient Http
@inject ProtectedLocalStorage ProtectedLocalStorage

<h1>Endre passord</h1>
<hr/>
<br/>

@if (_isSaving)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="_changePasswordDto" OnValidSubmit="ChangePasswordOnClick">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="CurrentPassword">Nåværende passord</label>
            <InputText id="CurrentPassword" type="password" class="form-control" @bind-Value="_changePasswordDto.CurrentPassword" />
        </div>

        <div class="form-group">
            <label for="NewPassword">Nytt passord</label>
            <InputText id="NewPassword" type="password" class="form-control" @bind-Value="_changePasswordDto.NewPassword" />
        </div>

        <div class="form-group">
            <label for="ConfirmPassword">Bekreft nytt passord</label>
            <InputText id="ConfirmPassword" type="password" class="form-control" @bind-Value="_changePasswordDto.ConfirmPassword" />
        </div><br />

        <button type="submit" class="btn btn-primary" disabled="@_isSaving">Oppdater passord</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger">@_errorMessage</div>
}
@if (!string.IsNullOrEmpty(_successMessage))
{
    <div class="alert alert-success">@_successMessage</div>
}

@code {
    private ChangePasswordDto _changePasswordDto = new ChangePasswordDto();
    private bool _isSaving;
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;

    private async Task ChangePasswordOnClick()
    {
        try
        {
            _isSaving = true;
            var token = await ProtectedLocalStorage.GetAsync<string>("authToken");
            if (!token.Success || string.IsNullOrEmpty(token.Value))
            {
                _errorMessage = "Ingen token funnet. Vennligst logg inn.";
                return;
            }

            Http.DefaultRequestHeaders.Authorization = 
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);

            var response = await Http.PostAsJsonAsync("api/v1/Users/ChangePassword", _changePasswordDto);
            if (response.IsSuccessStatusCode)
            {
                _successMessage = "Passordet ble oppdatert.";
                _changePasswordDto = new ChangePasswordDto(); // Clear the form
            }
            else
            {
                _errorMessage = $"Feil: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"En feil oppstod: {ex.Message}";
        }
        finally
        {
            _isSaving = false;
        }
    }
}

@code {
    public class ChangePasswordDto
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
