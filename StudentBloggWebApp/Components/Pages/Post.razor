@page "/post/{PostId:guid}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using StudentBlogg.Feature.Comments
@using StudentBlogg.Feature.Posts
@using StudentBlogg.Feature.Users
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStorage

<h1>@_post?.Title</h1>
<p>@_post?.Content</p>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger">@_errorMessage</div>
}
<br/>
<h4>Kommentarer</h4>

@if (_comments.Any())
{
    <div class="comments-section">
        @foreach (var comment in _comments)
        {
            <div class="comment-card">
                <div class="comment-header">
                    <strong>@comment.UserName</strong>
                    <small class="comment-date">@GetRelativeTime(comment.DateCommented)</small>
                </div>
                <p class="comment-content">@comment.Content</p>
                @if (_currentUserId == comment.UserId)
                {
                    <a href="#" class="edit-link" @onclick="() => EditComment(comment)">Edit</a> |
                    <a href="#" class="delete-link" @onclick="() => DeleteComment(comment)">Delete</a>
                }
            </div>
        }
    </div>
}
else
{
    <p>No comments available.</p>
}

<br />

<!-- Button to toggle the visibility of the comment form -->
<button class="btn btn-primary" @onclick="ToggleCommentForm">Add Comment</button>

@if (_isCommentFormVisible)
{
    <div class="comment-form">
        <textarea @bind="_newComment" rows="4" placeholder="Enter your comment here..." class="form-control"></textarea>
        <br />
        <button class="btn btn-success" @onclick="PostComment">Submit</button>
        <button class="btn btn-secondary" @onclick="ToggleCommentForm">Cancel</button>
    </div>
}


<br />

@if (_isCommentFormVisible)
{
    <textarea @bind="_newComment" rows="4" placeholder="Enter your comment here..." class="form-control"></textarea>
    <br />
    <button class="btn btn-success" @onclick="PostComment">Submit</button>
    <button class="btn btn-secondary" @onclick="ToggleCommentForm">Cancel</button>
}

@code {
    [Parameter] public Guid PostId { get; set; }

    private PostDto? _post;
    private List<CommentDto> _comments = new List<CommentDto>();
    private string? _errorMessage;
    private bool _isCommentFormVisible = false;
    private string _newComment = string.Empty;
    private Guid? _currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await ProtectedLocalStorage.GetAsync<string>("authToken");
        if (tokenResult.Success && !string.IsNullOrEmpty(tokenResult.Value))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(tokenResult.Value);
            var userIdClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "UserId" || c.Type == "id");

            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out var userId))
            {
                _currentUserId = userId;
            }
        }

        await LoadPost();
        await LoadComments();
    }

    
    // This is called whenever parameters are set (including after a page refresh)
    protected override async Task OnParametersSetAsync()
    {
        // Re-load the post and comments every time the component is rendered
        await LoadPost();
        await LoadComments();
    }

    private async Task LoadPost()
    {
        var response = await Http.GetAsync($"api/v1/posts/{PostId}");
        if (response.IsSuccessStatusCode)
        {
            _post = await response.Content.ReadFromJsonAsync<PostDto>();
        }
        else
        {
            _errorMessage = "Error loading the post.";
        }
    }

    private async Task LoadComments()
    {
        var response = await Http.GetAsync($"api/v1/Comments/{PostId}/comments");
        if (response.IsSuccessStatusCode)
        {
            _comments = await response.Content.ReadFromJsonAsync<List<CommentDto>>() ?? new List<CommentDto>();

            foreach (var comment in _comments)
            {
                comment.UserName = await GetUserNameById(comment.UserId);
            }
        }
        else
        {
            _errorMessage = "Error loading the comments.";
        }
    }

    private async Task<string> GetUserNameById(Guid userId)
    {
        var userResponse = await Http.GetAsync($"api/v1/users/{userId}");
        if (userResponse.IsSuccessStatusCode)
        {
            var user = await userResponse.Content.ReadFromJsonAsync<UserDto>();
            return user?.Username ?? "Unknown User";
        }
        else
        {
            return "Unknown User";
        }
    }

    private void ToggleCommentForm()
    {
        _isCommentFormVisible = !_isCommentFormVisible;
    }

    private async Task PostComment()
    {
        if (string.IsNullOrEmpty(_newComment))
        {
            _errorMessage = "Comment cannot be empty.";
            return;
        }

        var commentDto = new CommentRegDto
        {
            Content = _newComment
        };

        var response = await Http.PostAsJsonAsync($"api/v1/Comments/Post?postId={PostId}", commentDto);

        if (response.IsSuccessStatusCode)
        {
            var newComment = await response.Content.ReadFromJsonAsync<CommentDto>();
            if (newComment != null)
            {
                newComment.UserName = await GetUserNameById(newComment.UserId);

                _comments.Add(newComment);
                _newComment = string.Empty;
                _isCommentFormVisible = false;
            }
        }
        else
        {
            _errorMessage = "Error posting comment.";
        }
    }
    
    private async Task EditComment(CommentDto comment)
    {
        // Optionally, toggle an editing mode or redirect to a comment editing page.
        // Example: Redirect to an edit page.
        NavigationManager.NavigateTo($"/edit-comment/{comment.Id}");
    }


    private async Task DeleteComment(CommentDto comment)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/v1/Comments/{comment.Id}");
            if (response.IsSuccessStatusCode)
            {
                _comments.Remove(comment);
            }
            else
            {
                _errorMessage = "Failed to delete the comment.";
            }
        }
    }

    
    private string GetRelativeTime(DateTime commentDateTime)
    {
        var timeSpan = DateTime.UtcNow - commentDateTime.ToUniversalTime();

        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        else if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        else if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hours ago";
        else if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} days ago";
        else
            return commentDateTime.ToLocalTime().ToString("f"); // Full datetime
    }

}

<style>
    /* Comments Section */
    .comments-section {
        margin-top: 20px;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .comment-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .comment-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .comment-header strong {
        font-size: 1.1em;
        color: #333;
    }

    .comment-date {
        font-size: 0.9em;
        color: #777;
    }

    .comment-content {
        font-size: 1em;
        line-height: 1.5;
        color: #555;
    }

    /* Comment Form */
    .comment-form textarea {
        width: 100%;
        resize: none;
        border-radius: 5px;
        border: 1px solid #ddd;
        padding: 10px;
        font-size: 1em;
    }

    .comment-form button {
        margin-right: 10px;
    }

    .comment-date {
        font-size: 0.85em;
        color: #777;
    }

    .edit-link, .delete-link {
        margin-left: 10px;
        color: #007bff;
        cursor: pointer;
        text-decoration: none;
    }

    .edit-link:hover, .delete-link:hover {
        text-decoration: underline;
    }
</style>